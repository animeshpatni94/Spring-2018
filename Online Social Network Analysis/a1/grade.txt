Grade: 25.00/50.00

12 Deduction(s):

--------------
#1: 2.00 points
Failing test: test_approx_bet_1: 
        @points=2
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 183, in test_approx_bet_1
    self.assertListEqual(res, [(('A', 'B'), 5.0), (('A', 'C'), 1.0), (('B', 'C'), 5.0), (('B', 'D'), 12.0), (('D', 'E'), 4.5), (('D', 'F'), 4.0), (('D', 'G'), 4.5), (('E', 'F'), 1.5), (('F', 'G'), 1.5)])
AssertionError: Lists differ: [(('A', 'B'), 2.5), (('A', 'C'), 0.5), (('B', 'C'), 2.5[155 chars].75)] != [(('A', 'B'), 5.0), (('A', 'C'), 1.0), (('B', 'C'), 5.0[112 chars]1.5)]

First differing element 0:
(('A', 'B'), 2.5)
(('A', 'B'), 5.0)

Diff is 683 characters long. Set self.maxDiff to None to see it.

source:
    def test_approx_bet_1(self):
         """
         @points=2
         """
         res = sorted(approximate_betweenness(example_graph(), 5).items())
         self.assertListEqual(res, [(('A', 'B'), 5.0), (('A', 'C'), 1.0), (('B', 'C'), 5.0), (('B', 'D'), 12.0), (('D', 'E'), 4.5), (('D', 'F'), 4.0), (('D', 'G'), 4.5), (('E', 'F'), 1.5), (('F', 'G'), 1.5)])
--------------

--------------
#2: 2.00 points
Failing test: test_approx_bet_2: 
        @points=2
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 190, in test_approx_bet_2
    self.assertListEqual(res, [(('A', 'B'), 2.0), (('A', 'C'), 1.0), (('B', 'C'), 2.0), (('B', 'D'), 6.0), (('D', 'E'), 2.5), (('D', 'F'), 2.0), (('D', 'G'), 2.5), (('E', 'F'), 1.5), (('F', 'G'), 1.5)])
AssertionError: Lists differ: [(('A', 'B'), 1.0), (('A', 'C'), 0.5), (('B', 'C'), 1.0[157 chars].75)] != [(('A', 'B'), 2.0), (('A', 'C'), 1.0), (('B', 'C'), 2.0[111 chars]1.5)]

First differing element 0:
(('A', 'B'), 1.0)
(('A', 'B'), 2.0)

- [(('A', 'B'), 1.0),
?               ^

+ [(('A', 'B'), 2.0),
?               ^

-  (('A', 'C'), 0.5),
-  (('B', 'C'), 1.0),
?     ^

+  (('A', 'C'), 1.0),
?     ^

+  (('B', 'C'), 2.0),
-  (('B', 'D'), 3.0),
?               ^

+  (('B', 'D'), 6.0),
?               ^

-  (('D', 'E'), 1.3333333333333335),
+  (('D', 'E'), 2.5),
-  (('D', 'F'), 1.0),
?               ^

+  (('D', 'F'), 2.0),
?               ^

-  (('D', 'G'), 1.3333333333333335),
-  (('E', 'F'), 0.7499999999999999),
+  (('D', 'G'), 2.5),
+  (('E', 'F'), 1.5),
-  (('F', 'G'), 0.75)]
?               ^ -

+  (('F', 'G'), 1.5)]
?               ^


source:
    def test_approx_bet_2(self):
         """
         @points=2
         """
         res = sorted(approximate_betweenness(example_graph(), 2).items())
         self.assertListEqual(res, [(('A', 'B'), 2.0), (('A', 'C'), 1.0), (('B', 'C'), 2.0), (('B', 'D'), 6.0), (('D', 'E'), 2.5), (('D', 'F'), 2.0), (('D', 'G'), 2.5), (('E', 'F'), 1.5), (('F', 'G'), 1.5)])
--------------

--------------
#3: 5.00 points
Failing test: test_bfs_3: 
        @points=5

        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 102, in test_bfs_3
    [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 3), ('F', 3), ('G', 2)])
AssertionError: Lists differ: [('A', 1), ('B', 2), ('C', 2), ('D', 2), ('E', 3), ('F', 2), ('G', 3)] != [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 3), ('F', 3), ('G', 2)]

First differing element 1:
('B', 2)
('B', 1)

- [('A', 1), ('B', 2), ('C', 2), ('D', 2), ('E', 3), ('F', 2), ('G', 3)]
?                  ^         ^         ^                   ^         ^

+ [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 3), ('F', 3), ('G', 2)]
?                  ^         ^         ^                   ^         ^


source:
    def test_bfs_3(self):
         """
         @points=5
 
         """
         graph = example_graph2()
         node2distances, node2num_paths, node2parents = bfs(graph, 'A', max_depth=10)
         self.assertListEqual(sorted(node2distances.items()),
                              [('A', 0), ('B', 2), ('C', 1), ('D', 1), ('E', 3), ('F', 4), ('G', 2)])
         self.assertListEqual(sorted(node2num_paths.items()),
                              [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 3), ('F', 3), ('G', 2)])
         res = sorted((node, sorted(parents)) for node, parents in node2parents.items())
         self.assertListEqual(res,
                              [('B', ['D']), ('C', ['A']), ('D', ['A']), ('E', ['B', 'G']), ('F', ['E']), ('G', ['C', 'D'])])
         b = bottom_up('A', node2distances, node2num_paths, node2parents)
         self.assertEqual(1.0, round(b[('E', 'F')], 2))
         self.assertEqual(3.83, round(b[('A', 'D')], 2))
         self.assertEqual(1.67, round(b[('B', 'D')], 2))
         self.assertEqual(1.17, round(b[('D', 'G')], 2))
         self.assertEqual(2.17, round(b[('A', 'C')], 2))
         self.assertEqual(0.67, round(b[('B', 'E')], 2))
         self.assertEqual(1.33, round(b[('E', 'G')], 2))
         self.assertEqual(1.17, round(b[('C', 'G')], 2))
--------------

--------------
#4: 2.00 points
Failing test: test_bfs_n2np_1: 
        @points=2
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 58, in test_bfs_n2np_1
    self.assertListEqual(res, [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 1), ('F', 1), ('G', 2)])
AssertionError: Lists differ: [('A', 2), ('B', 2), ('C', 2), ('D', 2), ('E', 1), ('F', 2), ('G', 3)] != [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 1), ('F', 1), ('G', 2)]

First differing element 0:
('A', 2)
('A', 1)

- [('A', 2), ('B', 2), ('C', 2), ('D', 2), ('E', 1), ('F', 2), ('G', 3)]
?        ^         ^         ^         ^                   ^         ^

+ [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 1), ('F', 1), ('G', 2)]
?        ^         ^         ^         ^                   ^         ^


source:
    def test_bfs_n2np_1(self):
         """
         @points=2
         """
         node2distances, node2num_paths, node2parents = bfs(example_graph(), 'E', 5)
         res = sorted(node2num_paths.items())
         self.assertListEqual(res, [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 1), ('F', 1), ('G', 2)])
--------------

--------------
#5: 1.00 points
Failing test: test_bfs_n2np_2: 
        @points=1
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 82, in test_bfs_n2np_2
    self.assertListEqual(res, [('B', 1), ('D', 1), ('E', 1), ('F', 1), ('G', 2)])
AssertionError: Lists differ: [('B', 2), ('D', 2), ('E', 1), ('F', 2), ('G', 3)] != [('B', 1), ('D', 1), ('E', 1), ('F', 1), ('G', 2)]

First differing element 0:
('B', 2)
('B', 1)

- [('B', 2), ('D', 2), ('E', 1), ('F', 2), ('G', 3)]
?        ^         ^                   ^         ^

+ [('B', 1), ('D', 1), ('E', 1), ('F', 1), ('G', 2)]
?        ^         ^                   ^         ^


source:
    def test_bfs_n2np_2(self):
         """
         @points=1
         """
         node2distances, node2num_paths, node2parents = bfs(example_graph(), 'E', 2)
         res = sorted(node2num_paths.items())
         self.assertListEqual(res, [('B', 1), ('D', 1), ('E', 1), ('F', 1), ('G', 2)])
--------------

--------------
#6: 2.00 points
Failing test: test_bfs_n2p_1: 
        @points=2
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 66, in test_bfs_n2p_1
    self.assertListEqual(res, [('A', ['B']), ('B', ['D']), ('C', ['B']), ('D', ['E']), ('F', ['E']), ('G', ['D', 'F'])])
AssertionError: Lists differ: [('A', ['B', 'B']), ('B', ['D', 'D']), ('C', ['B', '[62 chars]F'])] != [('A', ['B']), ('B', ['D']), ('C', ['B']), ('D', ['E[32 chars]F'])]

First differing element 0:
('A', ['B', 'B'])
('A', ['B'])

- [('A', ['B', 'B']),
?         -----

+ [('A', ['B']),
-  ('B', ['D', 'D']),
?         -----

+  ('B', ['D']),
-  ('C', ['B', 'B']),
?         -----

+  ('C', ['B']),
-  ('D', ['E', 'E']),
?         -----

+  ('D', ['E']),
-  ('F', ['E', 'E']),
?         -----

+  ('F', ['E']),
-  ('G', ['D', 'D', 'F'])]
?             -----

+  ('G', ['D', 'F'])]

source:
    def test_bfs_n2p_1(self):
         """
         @points=2
         """
         node2distances, node2num_paths, node2parents = bfs(example_graph(), 'E', 5)
         res = sorted((node, sorted(parents)) for node, parents in node2parents.items())
         self.assertListEqual(res, [('A', ['B']), ('B', ['D']), ('C', ['B']), ('D', ['E']), ('F', ['E']), ('G', ['D', 'F'])])
--------------

--------------
#7: 1.00 points
Failing test: test_bfs_n2p_2: 
        @points=1
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 90, in test_bfs_n2p_2
    self.assertListEqual(res, [('B', ['D']), ('D', ['E']), ('F', ['E']), ('G', ['D', 'F'])])
AssertionError: Lists differ: [('B', ['D', 'D']), ('D', ['E', 'E']), ('F', ['E', '[24 chars]F'])] != [('B', ['D']), ('D', ['E']), ('F', ['E']), ('G', ['D', 'F'])]

First differing element 0:
('B', ['D', 'D'])
('B', ['D'])

+ [('B', ['D']), ('D', ['E']), ('F', ['E']), ('G', ['D', 'F'])]
- [('B', ['D', 'D']),
-  ('D', ['E', 'E']),
-  ('F', ['E', 'E']),
-  ('G', ['D', 'D', 'F'])]

source:
    def test_bfs_n2p_2(self):
         """
         @points=1
         """
         node2distances, node2num_paths, node2parents = bfs(example_graph(), 'E', 2)
         res = sorted((node, sorted(parents)) for node, parents in node2parents.items())
         self.assertListEqual(res, [('B', ['D']), ('D', ['E']), ('F', ['E']), ('G', ['D', 'F'])])
--------------

--------------
#8: 2.00 points
Failing test: test_bottom_up_1: 
        @points=2
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 167, in test_bottom_up_1
    self.assertListEqual(res, [(('A', 'B'), 1.0), (('B', 'C'), 1.0), (('B', 'D'), 3.0), (('D', 'E'), 4.5), (('D', 'G'), 0.5), (('E', 'F'), 1.5), (('F', 'G'), 0.5)])
AssertionError: Lists differ: [(('A', 'B'), 0.5), (('B', 'C'), 0.5), (('B', 'D'), 1.5[132 chars]333)] != [(('A', 'B'), 1.0), (('B', 'C'), 1.0), (('B', 'D'), 3.0[73 chars]0.5)]

First differing element 0:
(('A', 'B'), 0.5)
(('A', 'B'), 1.0)

- [(('A', 'B'), 0.5),
?                --

+ [(('A', 'B'), 1.0),
?               ++

-  (('B', 'C'), 0.5),
?                --

+  (('B', 'C'), 1.0),
?               ++

-  (('B', 'D'), 1.5),
?               ^ ^

+  (('B', 'D'), 3.0),
?               ^ ^

-  (('D', 'E'), 2.333333333333333),
-  (('D', 'G'), 0.3333333333333333),
-  (('E', 'F'), 0.6666666666666666),
-  (('F', 'G'), 0.3333333333333333)]
+  (('D', 'E'), 4.5),
+  (('D', 'G'), 0.5),
+  (('E', 'F'), 1.5),
+  (('F', 'G'), 0.5)]

source:
    def test_bottom_up_1(self):
         """
         @points=2
         """
         node2distances, node2num_paths, node2parents = bfs(example_graph(), 'E', 5)
         result = bottom_up('E', node2distances, node2num_paths, node2parents)
         res = sorted(result.items())
         self.assertListEqual(res, [(('A', 'B'), 1.0), (('B', 'C'), 1.0), (('B', 'D'), 3.0), (('D', 'E'), 4.5), (('D', 'G'), 0.5), (('E', 'F'), 1.5), (('F', 'G'), 0.5)])
--------------

--------------
#9: 2.00 points
Failing test: test_bottom_up_2: 
        @points=2
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 176, in test_bottom_up_2
    self.assertListEqual(res, [(('B', 'D'), 1.0), (('D', 'E'), 2.5), (('D', 'G'), 0.5), (('E', 'F'), 1.5), (('F', 'G'), 0.5)])
AssertionError: Lists differ: [(('B', 'D'), 0.5), (('D', 'E'), 1.3333333333333335), ([95 chars]333)] != [(('B', 'D'), 1.0), (('D', 'E'), 2.5), (('D', 'G'), 0.5[35 chars]0.5)]

First differing element 0:
(('B', 'D'), 0.5)
(('B', 'D'), 1.0)

- [(('B', 'D'), 0.5),
?                --

+ [(('B', 'D'), 1.0),
?               ++

-  (('D', 'E'), 1.3333333333333335),
-  (('D', 'G'), 0.3333333333333333),
-  (('E', 'F'), 0.6666666666666666),
-  (('F', 'G'), 0.3333333333333333)]
+  (('D', 'E'), 2.5),
+  (('D', 'G'), 0.5),
+  (('E', 'F'), 1.5),
+  (('F', 'G'), 0.5)]

source:
    def test_bottom_up_2(self):
         """
         @points=2
         """
         node2distances, node2num_paths, node2parents = bfs(example_graph(), 'E', 2)
         result = bottom_up('E', node2distances, node2num_paths, node2parents)
         res = sorted(result.items())
         self.assertListEqual(res, [(('B', 'D'), 1.0), (('D', 'E'), 2.5), (('D', 'G'), 0.5), (('E', 'F'), 1.5), (('F', 'G'), 0.5)])
--------------

--------------
#10: 2.00 points
Failing test: test_brute_force_norm_cut1: 
        @points=2
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 198, in test_brute_force_norm_cut1
    self.assertEqual(len(r), 1)
AssertionError: 288 != 1

source:
    def test_brute_force_norm_cut1(self):
         """
         @points=2
         """
         r = brute_force_norm_cut(example_graph(), 1)
         self.assertEqual(len(r), 1)
         self.assertEqual(r, [(0.41666666666666663, [('B', 'D')])])
--------------

--------------
#11: 2.00 points
Failing test: test_brute_force_norm_cut2: 
        @points=2
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 206, in test_brute_force_norm_cut2
    self.assertEqual(len(r), 14)
AssertionError: 288 != 14

source:
    def test_brute_force_norm_cut2(self):
         """
         @points=2
         """
         r = brute_force_norm_cut(example_graph(), 2)
         self.assertEqual(len(r), 14)
         self.assertEqual(sorted(r)[0], (0.41666666666666663, [('A', 'B'), ('B', 'D')]))
--------------

--------------
#12: 2.00 points
Failing test: test_brute_force_norm_cut3: 
        @points=2
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 215, in test_brute_force_norm_cut3
    self.assertEqual(len(r), 68)
AssertionError: 288 != 68

source:
    def test_brute_force_norm_cut3(self):
         """
         @points=2
         """
         r = brute_force_norm_cut(example_graph(), 3)
         self.assertEqual(len(r), 68)
         self.assertEqual(sorted(r)[-1], (1.3333333333333333, [('D', 'F'), ('E', 'F'), ('F', 'G')]))
--------------

